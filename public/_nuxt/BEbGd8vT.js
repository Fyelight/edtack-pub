import{r as v,J as y,o as a,c as i,a as e,v as f,z as L,x as g,t as o,F as p,y as _,q as w,C as M}from"./DX4Xkoew.js";import{_ as k}from"./DlAUqK2U.js";const P={class:"problem-section"},x={class:"search-filter-container"},A={class:"problem-stats"},T={class:"problem-list"},D={class:"problem-items"},H={class:"problem-content"},E={class:"problem-info"},V={class:"problem-title"},B={class:"problem-category"},F={class:"problem-tags"},N={class:"problem-actions"},U=["disabled","onClick"],q={key:0,class:"no-results"},z={__name:"index",setup($){const d=v(""),u=v(""),r=v("all"),c=v([{id:1,title:"Two Sum",category:"Array",difficulty:"Easy",tags:["Array","Hash Table"],solved:!1},{id:2,title:"Add Two Numbers",category:"Linked List",difficulty:"Medium",tags:["Linked List","Math"],solved:!1},{id:3,title:"Longest Substring Without Repeating Characters",category:"String",difficulty:"Medium",tags:["Hash Table","Two Pointers","String"],solved:!0},{id:4,title:"Median of Two Sorted Arrays",category:"Array",difficulty:"Hard",tags:["Array","Binary Search","Divide and Conquer"],solved:!1},{id:5,title:"Longest Palindromic Substring",category:"String",difficulty:"Medium",tags:["String","Dynamic Programming"],solved:!0}]),m=y(()=>c.value.filter(l=>{const t=l.title.toLowerCase().includes(d.value.toLowerCase())||l.category.toLowerCase().includes(d.value.toLowerCase())||l.tags.some(C=>C.toLowerCase().includes(d.value.toLowerCase())),s=u.value===""||l.difficulty===u.value,n=r.value==="all"||r.value==="solved"&&l.solved||r.value==="unsolved"&&!l.solved;return t&&s&&n})),h=y(()=>c.value.filter(l=>l.solved).length);function b(l){switch(l){case"Easy":return"easy";case"Medium":return"medium";case"Hard":return"hard";default:return""}}function S(l){const t=c.value.find(s=>s.id===l);t&&!t.solved&&(t.solved=!0,console.log(`Problem ${l} solved.`))}return(l,t)=>(a(),i("div",P,[e("div",x,[f(e("input",{"onUpdate:modelValue":t[0]||(t[0]=s=>d.value=s),type:"text",placeholder:"Search problems...",class:"search-input"},null,512),[[L,d.value]]),f(e("select",{"onUpdate:modelValue":t[1]||(t[1]=s=>u.value=s),class:"difficulty-select"},t[3]||(t[3]=[e("option",{value:""}," All Difficulties ",-1),e("option",{value:"Easy"}," Easy ",-1),e("option",{value:"Medium"}," Medium ",-1),e("option",{value:"Hard"}," Hard ",-1)]),512),[[g,u.value]]),f(e("select",{"onUpdate:modelValue":t[2]||(t[2]=s=>r.value=s),class:"solved-select"},t[4]||(t[4]=[e("option",{value:"all"}," All Problems ",-1),e("option",{value:"solved"}," Solved ",-1),e("option",{value:"unsolved"}," Unsolved ",-1)]),512),[[g,r.value]])]),e("div",A,[e("span",null,"Total Problems: "+o(c.value.length),1),e("span",null,"Solved: "+o(h.value),1)]),e("div",T,[e("ul",D,[(a(!0),i(p,null,_(m.value,s=>(a(),i("li",{key:s.id,class:"problem-item"},[e("div",H,[e("div",E,[e("p",V,o(s.title),1),e("p",B,o(s.category),1),e("div",F,[(a(!0),i(p,null,_(s.tags,n=>(a(),i("span",{key:n,class:"problem-tag"},o(n),1))),128))])]),e("div",N,[e("span",{class:M(["difficulty-badge",[b(s.difficulty)]])},o(s.difficulty),3),e("button",{class:"solve-button",disabled:s.solved,onClick:n=>S(s.id)},o(s.solved?"Solved":"Solve"),9,U)])])]))),128))])]),m.value.length===0?(a(),i("div",q," No problems found matching your criteria. ")):w("",!0)]))}},Q=k(z,[["__scopeId","data-v-db30e3fd"]]);export{Q as default};
